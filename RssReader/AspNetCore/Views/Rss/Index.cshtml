@model Pagination<RssModel>

@{
    ViewBag.Title = "Index";
}
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
    var pageSize = Model.PageSize;
    var titleToSearch = Model.TitleToSearch;
}

<div class="row">
    <h1>Rss Reader</h1>
    @using (Html.BeginForm())
    {
        <div class="row">
            <div class="col-md-6 col-lg-6 col-sm-12">
                Szukaj po tytule: @Html.TextBox("titleToSearch")
                <input type="submit" value="Szukaj"/>
            </div>
            <div class="col-md-6 col-lg-6 col-sm-12 text-right">
                Ilość elementów na stronie: @Html.TextBox("pageSize")
                <input type="submit" value="Zmień"/>
            </div>
        </div>
    }


    @foreach (var row in Split(Model.RMList, 2))
    {
        <div class="row">
            @foreach (var column in row)
            {
                <div class="col-md-6">
                    <div class="rssItem">
                        <h3 class="rssItemTitle">
                            @column.Title
                        </h3>
                        <div class="rssItemDescription">
                            @Html.Raw(column.Description)
                            <div class="rssItemDate">
                                <p>
                                    @column.Date
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    <a asp-action="Index" asp-route-page="@(Model.PageIndex + 1)" asp-route-titleToSearch="@titleToSearch" asp-route-pageSize="@pageSize" class="btn btn-default pull-right @nextDisabled"> Następna </a>
    <a asp-action="Index" asp-route-page="@(Model.PageIndex - 1)" asp-route-titleToSearch="@titleToSearch" asp-route-pageSize="@pageSize" class="btn btn-default pull-right @prevDisabled"> Poprzednia </a>
</div>

@functions
{

    static IEnumerable<IEnumerable<T>> Split<T>(IEnumerable<T> rssList, int columns)
    {
        for (var i = 0; i < (double) rssList.Count() / columns; i++)
        {
            yield return rssList.Skip(i * columns).Take(columns);
        }
    }

}